# Docker Compose para Dokploy - Versión corregida
# Este archivo resuelve los problemas de despliegue en Dokploy

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: orientando_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      POSTGRES_DB: ${DB_NAME:-orientando_db}
      POSTGRES_USER: ${DB_USER:-orientando_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-orientando_pass123}
      POSTGRES_HOST_AUTH_METHOD: md5
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-orientando_user} -d ${DB_NAME:-orientando_db}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Aplicación Django
  web:
    build: .
    container_name: orientando_web
    # ports:
      # - "8000:8000"  # Exponer puerto para Dokploy
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      DEBUG: ${DEBUG:-False}
      DJANGO_SETTINGS_MODULE: config.settings
      SECRET_KEY: ${DJANGO_SECRET_KEY:-django-insecure-6*+xxjrz7@1wn1^vz5=!rb=w5m2$e*sc4i52x3_sbb=_@-_x*4}
      ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1}
      DB_NAME: ${DB_NAME:-orientando_db}
      DB_USER: ${DB_USER:-orientando_user}
      DB_PASSWORD: ${DB_PASSWORD:-orientando_pass123}
      DB_HOST: db
      DB_PORT: 5432
    command: >
      sh -c "mkdir -p /app/staticfiles /app/media &&
             ./wait-for-postgres.sh db 5432 &&
             python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput --clear &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Nginx como proxy reverso (DESHABILITADO - Usando Django directamente)
  # nginx:
  #   image: nginx:alpine
  #   container_name: orientando_nginx
  #   # ports:
  #   #   - "80:80"
  #   #   - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - static_volume:/var/www/static:ro
  #     - media_volume:/var/www/media:ro
  #   depends_on:
  #     - web
  #   networks:
  #     - app_network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:80"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  app_network:
    driver: bridge
